// Credit: https://github.com/twbs/bootstrap/tree/v4-dev/scss/mixins
@mixin highlight() {
  &:hover {
    opacity: 1.0;
    filter: drop-shadow(0px 0px 3px rgba(255,255,255,0.8));
    -webkit-filter: drop-shadow(0px 0px 3px rgba(255,255,255,0.8));
    -ms-filter: progid:DXImageTransform.Microsoft.Dropshadow(OffX=0, OffY=0, Color='#fff');
  }
}

//@mixin border-radius($radius: $border-radius) {
//  @if $enable-rounded {
//    border-radius: $radius;
//  }
//}
//
//@mixin box-shadow($shadow...) {
//  @if $enable-shadows {
//    box-shadow: $shadow;
//  }
//}
//
//@mixin transition($transition...) {
//  @if $enable-transitions {
//    transition: $transition;
//  }
//}

@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Center-align a block level element
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin pull-left {
  float: left !important;
}

@mixin pull-right {
  float: right !important;
}

//// Text truncate
//// Requires inline-block or block for proper styling
//@mixin text-truncate() {
//  overflow: hidden;
//  text-overflow: ellipsis;
//  white-space: nowrap;
//}

//@mixin hover {
//  @if $enable-hover-media-query {
//    // See Media Queries Level 4: http://drafts.csswg.org/mediaqueries/#hover
//    // Currently shimmed by https://github.com/twbs/mq4-hover-shim
//    @media (hover: hover) {
//      &:hover { @content }
//    }
//  }
//  @else {
//    &:hover { @content }
//  }
//}
//
@mixin hover-focus {
  @if $enable-hover-media-query {
    &:focus { @content }
    @include hover { @content }
  }
  @else {
    &:focus,
    &:hover {
      @content
    }
  }
}

// WebKit-style focus
@mixin tab-focus() {
  // Default
  outline: thin dotted;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

//
//
//// Form validation states
////
//// Used in _forms.scss to generate the form validation CSS for warnings, errors,
//// and successes.
//
//@mixin form-control-validation($color) {
//  // Color the label and help text
//  .help-block,
//  .form-control-label,
//  .radio,
//  .checkbox,
//  .radio-inline,
//  .checkbox-inline,
//  &.radio label,
//  &.checkbox label,
//  &.radio-inline label,
//  &.checkbox-inline label  {
//    color: $color;
//  }
//  // Set the border and box shadow on specific inputs to match
//  .form-control {
//    border-color: $color;
//    // @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
//
//    &:focus {
//      // border-color: darken($border-color, 10%);
//      // $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);
//      // @include box-shadow($shadow);
//    }
//  }
//
//  // Set validation states also for addons
//  .input-group-addon {
//    color: $color;
//    border-color: $color;
//    background-color: lighten($color, 40%);
//  }
//  // Optional feedback icon
//  .form-control-feedback {
//    color: $color;
//  }
//}
//
//// Form control focus state
////
//// Generate a customized focus state and for any input with the specified color,
//// which defaults to the `@input-border-focus` variable.
////
//// We highly encourage you to not customize the default value, but instead use
//// this to tweak colors on an as-needed basis. This aesthetic change is based on
//// WebKit's default styles, but applicable to a wider range of browsers. Its
//// usability and accessibility should be taken into account with any change.
////
//// Example usage: change the default blue border and shadow to white for better
//// contrast against a dark gray background.
//@mixin form-control-focus() {
//  &:focus {
//    border-color: $input-border-focus;
//    outline: none;
//    $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $input-box-shadow-focus;
//    @include box-shadow($shadow);
//  }
//}
//
//// Form control sizing
////
//// Relative text size, padding, and border-radii changes for form controls. For
//// horizontal sizing, wrap controls in the predefined grid classes. `<select>`
//// element gets special love because it's special, and that's a fact!
//
//@mixin input-size($parent, $input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
//  #{$parent} {
//    height: $input-height;
//    padding: $padding-vertical $padding-horizontal;
//    font-size: $font-size;
//    line-height: $line-height;
//    @include border-radius($border-radius);
//  }
//
//  select#{$parent} {
//    height: $input-height;
//    line-height: $input-height;
//  }
//
//  textarea#{$parent},
//  select[multiple]#{$parent} {
//    height: auto;
//  }
//}
//
//// Minimum breakpoint width. Null for the smallest (first) breakpoint.
////
////    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))
////    544px
//@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
//  $min: map-get($breakpoints, $name);
//  @return if($min != 0, $min, null);
//}
//
//// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
//// Makes the @content apply to the given breakpoint and wider.
//@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
//  $min: breakpoint-min($name, $breakpoints);
//  @if $min {
//    @media (min-width: $min) {
//      @content;
//    }
//  } @else {
//    @content;
//  }
//}
//
// Only display content to screen readers
//
// See: http://a11yproject.com/posts/how-to-hide-content/

@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
}

// add font-smoothing